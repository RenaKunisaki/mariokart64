Breakdown of RSP data file:

-Series of 8-byte RSP commands.
 -Command 00 marks the end of the commands, except in Luigi Raceway where they end at 0xA540.
-AI path data. Series of structures: X position, Y position, Z position, point ID; each is a 16-bit integer.
 -Data ends when all 3 coords are zero. If only X coord is zero, path ends and another one begins.
-??? graphics and other data
-End of file.

Rainbow Road:
0000 - xxxx: RSP commands.
xxxx - xxxx: AI path 0.
xxxx - 53EF: AI path 1.
53F0 - 7FFF: ???
8000 - 8FFF: Neon shroom GFX.
9000 - 9FFF: Neon Mario head GFX.
A000 - AFFF: Neon Boo GFX.
B000 - BFFF: Neon Peach head GFX.
...various other neon graphics following this pattern that I can't identify because SV sucks...
~11FE7 - ~15026: Chomp texture, some ball textures I don't recognize, a tongue, the Chomp's eye texture
~15027 - EOF: ???

Interesting that the graphics start right at 8000, but possibly a coincidence since it looks like right up to there is palette/animation data from 53F0. Things to try:
-See where this file gets loaded into RAM. Look for RSP Set Base Ptr commands and note the difference from this file's location. See if any commands directly reference these sections.
-Look through the RSP commands for pointers to these. They may be relative to the start of the file.
-Look in other RSP files and see if they all have graphics at 8000.

There's a good chance the game only reads the RSP commands and AI paths, and the commands refer to other data in the file.


In Mario Raceway's they start at 7068 with the Mario sign texture, so it's probably just a coincidence that RR's is 8000. Note too that the offset in Tile Molester is wrong: you  have to be at 7067 to view the graphics correctly (except the left edge), as it does not account for byteswapping.
Not only are the graphics not always at 8000, they're not always present. Big Donut's file is a mere 288 bytes, not enough for graphics! (The AI paths in here might be junk, past end of file, etc.) Banshee Boardwalk seems to have a texture, then more data, then more textures.
This certainly looks like a valid AI path, complete with incrementing point IDs. It's not past the end of the file. The file contains only some RSP commands and a path. The path ends with 8000 0000 0000, not 8000 8000 8000 as would signify the last path! Block Fort does this too.
-Maybe this ending determines what type of path it is? One might be for the camera to follow in flybys while the other is for the AI to follow. Or one is for the AI to follow when off screen and the other is for nearby AI and human players to follow. Would be interesting to somehow trick the game into keeping the AI in off-screen mode when they're not.