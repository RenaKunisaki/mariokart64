Will now attempt to crerate a new track in place of Rainbow Road.
For simplicity's sake I'm doing a quick hack here; I'm just going to tack on to the end of seg4 and seg6, and point all my stuff there, not using seg7. This way anything I miss that relies on the old data won't break.

Todo:
1 [X]Repoint seg4 and seg6
2 [X]Add new dlists and vertices to the end of them
3 [X]Point the dlist pointers to these new lists
4 [X]Point the surface maps to these new lists
5 [ ]Design the track
6 [ ]Add new AI path data
7 [ ]Add new item box data
8 [ ]Do something with the neon faces - maybe just blank out the graphics
9 [ ]Do something with the chomps

*******************************
* STEP ONE - REPOINT SEGMENTS *
*******************************

Header is 122600. Seg6 is 872A00 - 8804A0. Seg4 + script is 93CC60 - 9438C0.

 1 00 Seg6 Start
 2 04 Seg6 End
 3 08 Seg4 Start
 4 0C Script end
 5 10 Seg9 Start
 6 14 Seg9 End
 7 18 Always 0F000000
 8 1C # vertices (3,111)
 9 20 Size of compressed seg4
10 24 Size of script output (seg7) minus 8
11 28 Always 09000000 (texture list address?)
12 2C Unknown, 00000000 or 00010000, low half unused

Copy from expanded ROM: seg6 (E5DD90 - E76FC7), seg4+script (E76FF0 - E84167)
seg6 inserted at C00010 - C19247, seg4+script at C39260 - C463D7

I'm also going to disable checksum validation and use the upper 4MB patch just to be safe.

I believe the headers have to have the end addresses point to the first byte *after* the end, so e.g. C19248.
Also must remember to update word 9, now 0x0F00BF76. Updating words 1, 2, 3, 4 and 9, the track loads.

Now I'll see if I can add some dummy space between the end of seg4 and the script to have room to work in.
First update word 8 (# vertices) to a nice large number like 3,367 (0xD27), which adds 256 vertices.
Accounting for the dummy MIO0 header, seg4 starts at 0xC3A7B4, so the script starts at
0xC3A7B4 + (0xC27 * 0xE) = 0xC451D6. Insert 3,584 (256*14) bytes before it for the new vertices.
The script now starts at 0xC45FD6. Must update header words 4 and 9 accordingly (add 0xE00 (3,584) to both): 0xC471D8 and 0xCD76. The game still works and now we have 256 free vertices at 0xC451D6 (04:00AA22). However the new vertices are not loaded to RAM because the MIO0 file's output size is not updated.
We need to extract the raw seg4 data (0xC3A7B4 - 0xC45FD5) and re-compress it to generate a new valid MIO0 file.

This is where I discover that KHexEdit's copy function has bugs. Need to delete the old file, copy the new one, and paste it in, and use the menu (not Ctrl+C and Ctrl+V) to get it right.

New file ends at 0xC46195, so script begins at 0xC46196 and ends at 0xC47397. Must update the header to reflect this.
Our new vertices are at 807FF000 with the 8MB patch, which is 04:00C270. Note that the vertices are expanded to a 16-byte format in RAM, which means nothing else can be placed in seg4.
Oddly it looks like it changes the red and green values, but not the blue - a colour of FFFFFF becomes FCFCFF.
Also interesting, seg6 and seg9 do NOT get moved to upper 4MB...

So, recap:
new seg6 data is 0xC02CD0 - 0xC19248 (MIO0 header at 0xC00010)
new seg4/script is 0xC3A974 - 0xC47397 (MIO0 header at 0xC39260)
added vertices are 0xC45396, script starts at 0xC46196

*************************************
* STEP TWO: ADD DLISTS AND VERTICES *
*************************************

ROM Vertex format:
X Coord, 2 bytes
Y Coord, 2 bytes
Z Coord, 2 bytes
Texture S coord, 2 bytes
Texture T coord, 2 bytes
Red tint, 1 byte
Green tint, 1 byte
Blue tint, 1 byte
Unused (always 0), 1 byte

Let's add a simple test quad, at 0xC45396:
X    Y    Z    S    T    R  G  B  x
FF00 05DF FC00 0000 0000 FF 00 00 00
00FF 05DF FC00 0000 0000 00 FF 00 00
00FF 05DF 00FF 0000 0000 00 00 FF 00
FF00 05DF 00FF 0000 0000 FF FF FF 00
(I'll put an 0xAA after this just so it's clear where it ends.)

VTX  0: 02BC, 0000, FFFFFCB8
VTX  1: 02BC, 0028, FFFFFCB8
VTX  2: 02CD, 0028, FFFFFCED
VTX  3: 02CD, 0000, FFFFFCED
VTX  4: 02CD, 0000, FFFFFCED
VTX  5: 02CD, 0028, FFFFFCED
VTX  6: 0202, 0028, FFFFFD36
VTX  7: 0202, 0000, FFFFFD36
VTX  8: 01F4, 0000, FFFFFCFE
VTX  9: 01F4, 0028, FFFFFCFE
VTX 10: 02BC, 0028, FFFFFCB8
VTX 11: 02BC, 0000, FFFFFCB8
VTX 12: 0202, 0028, FFFFFD36
VTX 13: 02CD, 0028, FFFFFCED
VTX 14: 02BC, 0028, FFFFFCB8
VTX 15: 01F4, 0028, FFFFFCFE
VTX 16: FFFFFE9D, 0000, 0098
VTX 17: FFFFFCB6, 0032, 0113
VTX 18: FFFFFE9D, 0000, 01F6
VTX 19: 026B, 0032, FFFFFA87
VTX 20: 02BC, 0064, FFFFF9C0
VTX 21: 026B, 0032, FFFFFA87
VTX 22: 03A9, 008C, FFFFFA22
VTX 23: 02BC, 0064, FFFFF9C0
VTX 24: 01E1, 0032, FFFFFA25
VTX 25: 01F4, 0000, FFFFFAF1
VTX 26: 026B, 0032, FFFFFA87
VTX 27: 01F4, 0000, FFFFFAF1
VTX 28: 01F4, 0000, FFFFFB1E
VTX 29: 026B, 0032, FFFFFA87
VTX 30: 0818, 0014, FFFFFE72
VTX 31: 0816, 0000, FFFFFF7E

Then a dlist at 0xC19250 (06:016580, 801E3080):
BB000001 FFFFFFFF Begin Dlist - not entirely sure what this does, the 0x26 command writes it
BA000C02 00002000 Set Other Mode H - not sure what these do, but if we don't
BA001301 00080000 Set Other Mode H - do this, the matrix is messed up, and the
B9000314 005049D8 Set Other Mode L - quad kinda follows us around O_o
0400103F 0400C270 Load 4 vertices from 04:00C270
B1040200 00060400 Triangle (0, 1, 2) (0, 2, 3)
B8000000 00000000 End Dlist

There shall be no textures because they don't want to work and I have absolutely no time to make them work. Gourad shading it is.

We'll have to recompress this file too. We'll expand it just a bit; not too much as we don't want to run out of RAM (the 8MB hack is not affecting seg6 for some reason).
Now our new dlist is at 0xC1929C and the raw data begins at 0xC02D1C.

Now the moment of truth, let's point one of the dlists at our new one. The pointers are at 06:0164B8, so ROM 0xC191D4. Change from 06:0000D8 to 06:016580. It works, woo!
We'll also change the next North (06:000338) and South (06:0003D0) and the other directions for the first point (06:000210, 06:000178, 06:000288) to this one to make it show up properly.

The game actually does use the last byte of the vertex data in RAM as an alpha value, but I dunno how to set it. It's 0xFF no matter what the last byte in ROM is set to, but some other vertices have 0x96. Should fix this - look into how it translates from ROM format to RAM format, and make it use that last byte.

Not sure what this Set Combine does either, it just seems to make the quad not render. The params look like vertex IDs or something (e.g. 0x12, 0x18, 0x24).

*******************************
* STEP THREE: NEW SURFACE MAP *
*******************************

First we have to find the map:

802B94A4 surface map jump table
Rainbow Road routine:
80296328 LUI $A0, 0601
80296334 ADDIU $A0, $A0, 6440 ;06:016440 = 801E2F40, ROM 0xC1915C

80296328|3C 04 06 01|A4 4C 00 00|0C 0A 43 2B|24 84 64 40
80296338|0C 0A 57 1B|00 00 00 00|44 80 20 00|3C 01 80 16
So this is what we'd look for if we need to move it. However I'll start by just changing it.

Format:
Display list offset, 4 bytes
Surface type, 1 byte
Display list index, 1 byte
Flags, 2 bytes

We'll modify the second one, at 0xC19164, since it's the first whose dlist index is not 0xFF. Changing its type shows it's the section of track you start on.
Old: 07001850 01010000
New: 06016580 01010000

#2: 07001758

Apparently (as I discovered after fucking up the vertices) if you don't start over part of the surface map, the game breaks - no dlist runs, you don't appear, the race doesn't start, and it says "can't save ghost" right away.

Also, change its dlist ID to 3 and sure enough #3 gets called - that pretty much answers that question.

This doesn't seem to be working, let's wipe it right out and put a new one in. Copying the old one here:

00c1:9150 .. .. .. .. .. .. .. .. .. .. .. .. 07 00 20 c0 .P............ À
00c1:9160 01 ff 00 00 07 00 18 50 01 01 40 00 07 00 17 58 .ÿ.....P..@....X
00c1:9170 01 02 00 00 07 00 16 98 01 03 00 00 07 00 15 f8 ...............ø
00c1:9180 01 04 00 00 07 00 15 28 01 05 00 00 07 00 13 a0 .......(....... 
00c1:9190 01 06 00 00 07 00 19 78 01 07 00 00 07 00 1d 30 .......x.......0
00c1:91a0 01 08 00 00 07 00 1c 70 01 09 00 00 07 00 1b c0 .......p.......À
00c1:91b0 01 0a 00 00 07 00 1b 28 01 0b 00 00 07 00 1a 20 .......(....... 
00c1:91c0 01 0c 00 00 07 00 13 18 ff ff 00 00 00 00 00 00 ........ÿÿ......
(0x70 bytes) (did the second one always have flag 0x4000 set?)

Doing that I start way up in the air, and the polygon isn't solid. Changing the dlist ID doesn't seem to do anything. The game apparently doesn't see the polygon, but I don't start nowhere this time.

If I boost at the start and brake I can land ahead of the line, and then it seems to work fine, I once was even able to fall off and get put back on...
Looks like I'm starting at Y coord 0BB8 when I should be around 05E5.
If I change the dlist ID it stays with #1 until I land on the polygon, meaning it's not registering until I touch it.

807FEE80|FF 21 04 4B|0F 8D 00 00|00 00 00 00|FC FC FC FF <-- 04:00C0F0
807FEE90|FF 49 04 4B|0F FF 00 00|00 00 00 00|FC FC FC FF
807FEEA0|FF A7 04 53|0F DE 00 00|00 00 00 00|FC FC FC FF
807FEEB0|FF 7F 04 53|0F 6C 00 00|00 00 00 00|FC FC FC FF
807FEEC0|FE B0 04 3F|0F 99 00 00|00 00 00 00|FC FC FC FF
807FEED0|FE BD 04 3F|10 10 00 00|00 00 00 00|FC FC FC FF
807FEEE0|FF 20 04 47|10 06 00 00|00 00 00 00|FC FC FC FF
807FEEF0|FF 13 04 47|0F 8E 00 00|00 00 00 00|FC FC FC FF
807FEF00|FE 25 04 34|0F 89 00 00|00 00 00 00|FC FC FC FF
807FEF10|FE 19 04 34|10 00 00 00|00 00 00 00|FC FC FC FF
807FEF20|FE 7C 04 3A|10 0A 00 00|00 00 00 00|FC FC FC FF
807FEF30|FE 89 04 3A|0F 93 00 00|00 00 00 00|FC FC FC FF
807FEF40|08 0A 03 21|0B 94 00 00|00 00 00 00|FC FC FC FF
807FEF50|08 7F 03 21|0B B0 00 00|00 00 00 00|FC FC FC FF
807FEF60|08 96 03 1D|0B 4F 00 00|00 00 00 00|FC FC FC FF
807FEF70|08 21 03 1D|0B 33 00 00|00 00 00 00|FC FC FC FF

801E3600 is the polygon you're on at the beginning, there are several before it, it's at 0F:000580, the 32nd entry in the map data
if we wipe it out the same shit happens as with the new list

801E3640 is it in the new ROM, at 0F:000370, the 20th entry
There are only 16 triangle commands in 07:001850, but each one is 2 triangles, so this must be from the 10th one 07:001938: Tri (0, 1, 2), (0, 2, 3)
the vertices it loads should be at C43360 in ROM
With the new list there are only 2 entries here, one per triangle, so maybe it's looking for the 20th or something

Well I found the routine that looks for the start point, I don't know what it's doing to not work here, but if I hack out the call to it, things work fine, except the finish line banner is misplaced in some levels. At ROM 0x118AC4 write 0x24020001. This only works for Time Trial though.

ROM 0x0F37B4 is the array of tracks in the cups, I'm swapping Luigi Raceway with this for quick testing.


***************************
* STEP FOUR OR SO: DESIGN *
***************************


NEW VERTICES
Test quad (not to be included)
FF00 05DF FC00
00FF 05DF FC00
00FF 05DF 00FF
FF00 05DF 00FF

Start area
FFAF 05E4 FC00
005F 05E4 FC00
005F 05E5 00FF
FFAF 05E5 00FF

00c4:6190 00 00 00 00 00 00 26 52 00 00 58 20 08 40 ......&R..X .@
00c4:619e 0c 58 a4 18 c4 1c 58 28 29 48 2d 58 ac 39 .X¤.Ä.X()H-X¬9
00c4:61ac cc 3d 58 30 4a 50 4e 58 b4 5a d4 5e 58 38 Ì=X0JPNX´ZÔ^X8

00 0F 09 00 00 0F 79 40
01 E1 78 25 3C 01 80 2C
00 2F 08 21 0C 03 23 AB
80 24 8D AF 10 00 00 2D
8F BF 00 14

< I never finished this document. :( The finished level is in newtrack1.rom though, and it works nice. >

