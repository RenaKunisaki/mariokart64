966260 looks like interesting data. If wiped out the game won't boot. (0x2E0 bytes -> 0xAA.) Changing as few as the first 5 bytes = boom. After this looks like RSP commands.
The first 8 bytes apparently don't appear in RAM during the logo.

Around 969800 is interesting-looking. Music data is supposedly around here.

8002E000 0010
8002E058 0010 is drive through walls, so this must be related to hit detection (duh)

700, 0, -840
700, 40, -840
717, 40, -787
717, 0, -787

02BC0000FCB8
442F0000 00000000 C4520000
442F000000000000C4520000 not found

Around 8027D850 is Mario Raceway's geometry data in RAM. You can edit it here and the
changes will be immediately visible. This data is also the collision map - remove a
polygon and you can drive right through. However this is very strange, if you MOVE a
polygon, it is no longer solid, nor is there an invisible barrier where it used to be.
This isn't always true? If you move the very end of the wall at the first corner you can
drive through it, but if you move the next 2 points to meet it, shifting the wall
itself, the hit detection doesn't change. Also, you can go through it from the other side
that would have been inside the wall and thus not rendered.

001DB92C: 000002BC0000FCB8
001DB958: 000002BC0000FCB8
001DCD22: 000002BC0000FCB8
001DDC16: 000002BC0000FCB8
0027D850: 000002BC0000FCB8 *
0027D860: 000002BC0028FCB8
0027D8F0: 000002BC0028FCB8
0027D900: 000002BC0000FCB8 mirror?
0027D930: 000002BC0028FCB8
00281BD0: 000002BC0000FCB8
00281D50: 000002BC0000FCB8
00282610: 000002BC0000FCB8
00282680: 000002BC0000FCB8
002826A0: 000002BC0000FCB8
00286FC0: 000002BC0000FCB8
00286FF0: 000002BC0000FCB8
00287020: 000002BC0000FCB8
00287070: 000002BC0000FCB8
002870C0: 000002BC0000FCB8
002870F0: 000002BC0000FCB8
00287D80: 000002BC0000FCB8
00287D90: 000002BC0000FCB8


001DB92C: 000002BC0000FCB8
001DB958: 000002BC0000FCB8
001DCD22: 000002BC0000FCB8
001DDC16: 000002BC0000FCB8
00281BD0: 000002BC0000FCB8 - grass
00281D50: 000002BC0000FCB8
00282610: 000002BC0000FCB8
00282680: 000002BC0000FCB8
002826A0: 000002BC0000FCB8
00286FC0: 000002BC0000FCB8
00286FF0: 000002BC0000FCB8
00287020: 000002BC0000FCB8
00287070: 000002BC0000FCB8
002870C0: 000002BC0000FCB8
002870F0: 000002BC0000FCB8
00287D80: 000002BC0000FCB8
00287D90: 000002BC0000FCB8 - grass - probably all of this is grass
none of these appear related to hit detection
you can pretty much wipe out this block and you only get graphic glitches

By changing the geometry data file's output size to 4 bytes, you fall for a looooong time
through glitched crap before hitting the water, and then the game can't figure out where
to put you back. So the collision data must be linked to this.

8002CDF4 [0C023B70] handles boost ramps and runs only when you touch one. Disable this
call and you get stuck in that boost mode, which makes you unable to reverse or spin,
but your speed doesn't change and you can stop on the ramps.
Right above this, 8002CDEC runs every frame, branching right over this call. It checks if
$V1 != $T5. Most of the time, $V1 = 0x00100000. $T5 = 0. Touch the ramp and $T5 becomes
0x00100000.
It reads $V0 from 800F6A4C (32-bit) which is some sort of player effect word. Set bits of
this and various things happen such as being hit by lightning, Lakitu flying around,
wiping out, etc. When locked at zero you can turn in midair. Sure enough 00100000 gives
you a boost.
There are a bunch of writes to this... most store 0, some store 8 or 1.

800067B8 [ACED00BC]
80036100 [AE0F00BC]
80037E64 [AE0C00BC]?
80028C7C [AC9900BC]
8002BFC8 [AC8F00BC]
8002C920 [AE0C00BC]
8002DCA4 [AE0E00BC]
8002DCE4 [AE0C00BC]
8002DCF0 [AE0D00BC]
Disabling all writes to this while on pavement only makes Lakitu constantly say you're
going the wrong way.

When you hit the boost pad 8008C510 [AE0C00BC] writes to this but it only seems to be
writing the same value it had before. 8008ECDC [AE1900BC] stores the value | 00100000.
Then there are more writes of the same value. When you leave the pad 8008EE78 [ACE900BC]
stores the value with that bit cleared.
00400000 makes Lakitu bug you. 2 and 3 are seen after jumping and by leaving it in this
state you can turn freely.

8008C510 is called from 8008ECAC. This seems to run the moment you touch a boost ramp.
It doesn't seem to run while you're on the ramp. This is called from 8002B4F8, which also
runs only when you touch the ramp. Called from 8002B308, from 8002B870. Here there is a
jump that runs every frame skipping over this call if $V0 = zero. $V0 is a word from
800F699C, which is near the player status (is human, exists, is ghost, etc) at 800F6990.
This seems to be a bitflag; setting bits causes various things to happen such as spinning
out or crashing. 200 gives a boost as from a shroom. 800 is using Boo. 2000 is Star.
4000 is hit by lightning. 8000 moves you forward a bit. 40000 zooms the camera out.
800000 seems to be the boost ramp bit. 04000000 turns you into a bomb.
One could change the effects of things by looking for writes to this, like lightning
makes you invincible.
8002A144 sets the boost ramp flag when you touch the ramp. 8008ECE0 then clears it after
it's been dealt with. Again, only when you first touch the ramp. The effect doesn't stay
for as long as you're on the ramp.
Called from 8002E1F4 which runs every frame.

$T6 = effect (800F6A4C)
$T7 = effect & 0x40000000 - lightning flag; killing this call = ramps work while shrunk?

if not set:
$AT = 800E0000 + (character # << 2)
$F4 = word from DBD4($AT) ;800DDBDC for Yoshi - 8 floats here, all 3F400000 (0.75)
$F10 = 2.0
$F8 = 18.0
$F6 = $F4 / $F10 (=0.375)
$F12 = $F6 * $F8 (=6.75)
$T2 = hword from 800F69BE (player's vertical rotation)
$T3 = hword from 800F6A50
$A1, $A3 = $F0 (0)
0010($SP) = $T2 + $T3
0048($SP) = $F12
fuck I'm not tracing all this there's like hundreds of ops before it even checks for a
ramp

8002A0D0 runs when you're in the air
8002A114 runs when on a ramp and for a good amount of time after you make the jump
The branch right above it runs every frame and skips it if $V1 != 0xFE
T5 = V0 & 0xFF
V1 = T5 & 0xFFFF
$V0 is the return value from the subroutine it calls, 802ABD10, which reads it from a
computed address that in this case is 801DDAA3.

on entry: $A0 = 0102

$T6 = $A0 & 0xFFFF ;0102
$T7 = $T6 << 2
$T7 = $T7 - $T6
$T8 = word from 8015F580 ;801DAF50
$T7 = $T7 << 2
$T7 = $T7 - $T6
$T7 = $T7 << 2
$V1 = $T7 + $T8
$V0 = byte from $V1 + 3

802ABD10
$A0 changes as you move, most notable is its value changes by 0x100-200 when you move on
to a different type of surface.
When you hit the first boost ramp (backing up) the value is 0105, it reads 0xFE
from 801DDC2F
This is definitely surface type data, you can rig it to always read a certain value, for
example 0xFE makes EVERYTHING a boost ramp :-D
The code for this:
812ABD3C 2402
812ABD3E 00FE
FF, and seemingly any unknown value, is solid. You still slow down on grass...
FD is forbidden, Lakitu will get you.
FC is the weaker boost ramp used in DK's Jungle Parkway.
This must not completely override the surface types because for example if you land on a
wall you'll still get picked up.

801DAF50 should be the beginning of this data and of course it's not in the ROM.
801DB2C3 is where it reads from when you first start Time Trial ($A0 = 0x14). This data
also does not exist.

Interesting, the first byte is 40. Set it to F4-F7 and you tumble endlessly. F8-FB makes
Lakitu grab you. FC-FF do both. Any other value is normal. Set the whole word to
FEFEFEFE and Lakitu grabs you and drops you in front of the spot (looks like at 0,0,0). 00000000 or 0000FEFE breaks the graphics. 00FEFEFE makes that spot not solid.
40FE0001 changes what display list gets called when facing South?
48010001 makes Lakitu pick you up, 4C010001 makes you tumble and get picked up,
44010001 just makes you tumble, etc.
73010001 is normal by the looks of it.

This word defaults to 40010001.

Looks like maybe the first byte controls various flags. The second seems related to
display lists. Increasing it puts different things in view. 0 breaks GFX. The third, I
can't tell what it does. The 4th is surface type; set it to FE and you've got a boost
ramp.

The next word, FF900000, relates to this spot too. Change FF to 00 and it's no longer
solid. Just looks like the high bit toggles solidity. The others may not do anything.
Some of these bytes probably relate to sound.
The 90: change to C2 or more and again no solidity.
Byte 3 kills solidity if not zero, and byte 4 does if >= 0x16. This smells suspiciously
like a coordinate. The next 2 bytes, changed to zero, also remove solidity. The 2 after
that do too, but they need to be changed to 8000. Finally, the next two don't appear to
do much of anything.

A0 = 0014
T6 = 0014
T7 = 0050
T7 = 003C
T8 = 801DAF50
T7 = F0
T7 = DC
T7 = 370
V1 = T7 + T8
Read from V1+3

T7 = (((T6 << 2) - T6) << 2) - T6) << 2

((((n * 4) - n) * 4) - n) * 4
(n * 4) - n = (n * 3), so it looks like this is a painful way of multiplying by 44.
Feeding in values of 1, 2, 3 for $A0 we can see that's the end result anyway, as we end
up with 44, 88, 132.

T6 = 0001
T7 = 0004, 0003, 000C, 000B, 002C
so this might actually be 44 (0x2C) bytes. Indeed, it looks that way, as we can see 400x0001 every
44 bytes, and if we put an FE there, another spot right behind this one becomes a boost ramp.

801DB2C0:
4001 0001 FF90 0000|FEC1 FFF3 0000 FFA1
8027 2200 8027 2210|8027 2220 0000 0000
3F80 0000 0000 0000|8000 0000

1: Flags?
2: Display lists?
3: ?
4: Surface type

Very interesting, 80272200 is geometry data. Yep, change the colours of those polygons and it's the
very spot we were messing with. It's hard to tell for sure since this polygon is part of a quad,
so the colour fades, but change it to red and you'll find you get a boost whenever you're in the red
zone. And if we change these pointers the polygon is no longer solid. It must be taking its coords
from this geometry data. Clever.
I can't tell what if anything the next word after the pointers does. After that is a float that does
something quite interesting. Put a sufficiently large value here and you'll be launched into the air
when you touch the polygon! The default is 1.0, so I suspect this is how much to move you upward by
when you touch it to prevent you falling. At a mere 2.0 you fly up past the finish line banner. How
high you actually go seems to depend where on it you are. At 0.6 you sink in and can't move forward,
only backward. At 0.5 you basically just fall through right away. At 0, you sink slower, so this
might be a gravity modifier or something. Amusingly, Lakitu will drop you back on it and you'll sink
in the air! You can also mash R to levitate, and again, go backward but not forward.

The last 2 words, if set to FFFFFFFF, not only kill solidity but makes the game unable to figure out
where you drop you off when you fall.

So now where does this come from...? 802AE9D0 is storing bytes 3 and 4. 802AEA98 does 1 and 2.

802AE9D0 appears to store $A3 to the stack near the beginning which is read here. It's called from
802AEC6C with the value FFFFFFFF. Oh, so much funfun stack tracing. A3 is a parameter to this
function, or at least wasn't changed by the caller. It's called at 802AF728, which sets A3 to
S5 & 0xFFFF.
We can kinda keep going like this. 802AF690 does similar. Finally, way back at 80290D74, we have
LBU $A2, 0005($S0) - this $A2 seems to be the $A3 that eventually gets stored there. The first time
through, S0 is 801DAB98, which points to a bunch of 8-byte values beginning with 07. These are NOT
RSP commands, supposedly, command 7 is unused.

Looks like this is decompressed from an MIO0 file by the routine at at 802AA8E8. This is the file
at 84ABD0 - Royal Raceway's RSP data. This data appears at offset DC28 in the file and probably runs
to the end, making it 0x3B8 bytes. Looks very similar to the AI path format, with the last 8 bytes
being zero.

That offset is passed as 0600DC28 in $A0 to this function. Never woulda guessed this - it's
hardcoded! Set at 8029616C. Looks like 80295E18 is the dispatcher function that branches off to each
hardcoded routine.

802B94A4 is the jump table.
00 9650
01 72D0
02 93D8
03 B458
04 18240
05 79A0
06 18FD8
07 DC28
08 FF28
09 144B8
0A 23B68
0B 23070
0C 9C20
0D 16440
0E CC38
0F 
10 
11 
12 14338
13 

 0  1  2  3  4  5  6  7
07 00 17 D8 01 01 00 00
0: Always 7? 0 seems to mark end of data, any other value crashes
1-3: probably an offset, maybe into segment 7; changing them breaks entire game, swapping them
     breaks graphics
4: Surface type
5: Dlist related
6: ?
7: ?
1, 6 and 7 always seem to be zero

Breaking this generally makes the track not load at all; it sits there at blackness with the HUD
waiting forever.
Mario Raceway has 52 of these. The highest value for byte 5 is 0x11, which is also the highest
display list ID in the course path, excluding a few where both 4 and 5 are FF. Possibly the paths
specify an entry in this data, which then specifies the list to call. (Index into the table after
the texture list; this would be multiplied by 4 and the direction added.)
Looks like it - change them and the coord display shows the changes.
0x17D8 into the RSP file is in the middle of a bunch of Call Dlist commands which draw stuff near
the big shroom.
After the 3 that are FF are more whose dlist IDs mostly increment but jump around a bit. Most have surface type 8. The first one is for the grass around point 1. The last few have type 7.

In Mario Raceway the data in RAM is at 801D77D8. Looks like the data copied from ROM starts at
801D63F0.
80290CF8 reads this data.
Bytes 6 and 7 are a halfword that gets ANDed with 0x8000, 0x2000, 0x4000 - 8000 breaks it, others
don't seem to do much.

These could define AI behaviour?

802AF5D8 is called: A0=bytes 0-3, A1=byte 4 (signed), A2=byte 5 (unsigned)

802AF5D8:
T7 = A0 >> 0x18		;=7
T8 = T7 << 2		;=0x1C
T9 = 0x8015 + T8 	;=0x8015001C
T9 = word @ (T9+0x258)	;=0x270DF8 - location of RSP commands generated by script in RAM
T0 = A0 & 0xFFFFFF	;=0x17D8 - location of a display list
SP(0024) = S3
S3 = T9 + T0 + 0x80000000 ;=0x802725D0 - here be RSP commands
SP(0028) = S4
S4 = A1 << 0x18		;=0x01000000
SP(0020) = S2
hword @ 8015F6FA = 0
T6 = S4 >> 0x18		;=1
SP(0038) = S8
SP(0034) = S7
SP(0030) = S6
SP(002C) = S5
S4 = T6
SP(003C) = RA
SP(001C) = S1
SP(0018) = S0
SP(0044) = A1
SP(0048) = A2
hword @ 8015F6FC = 0
S2 = 0x8015F58C
S6 = 0
S7 = 0x06000000

802AF66C:
S0 = word @ S3		;=0xBB000001
S1 = word @ (S3+4)	;=0xFFFFFFFF
AT = 0x04000000
V0 = S0 & 0xFF000000	;=0xBB000000
A0 = S1
if(S7 == V0)		;Call Dlist command
{
	A1 = S4 << 0x18	;S4=0xFFFFFFFF, so =0xFF000000
	T1 = A1 >> 0x18 ;=0xFFFFFFFF
	A1 = T1
	A2 = S5 & 0xFFFF ;=(0xFF & 0xFFFF) = 0xFF
	call 802AF5D8 ;recursive call
	S6++
	goto 802AF778
} ;802AF6A0

A0 = S1
if(V0 == AT)		;Load Vertex command
{
	A1 = S0 >> 0xA ;S0 = 040040FF, so =0x00010010
	A2 = S0 >> 0x10 ;=0x400
	T3 = A2 & 0xFF ;=0
	T2 = A1 & 0x3F ;0x10
	A2 = T2
	A2 = T3 >> 1	;T3 = 0
	call 802AED6C
	S6++
	goto 802AF778
} ;802AF6CC

AT = 0xBF000000
A0 = S1			;yay redundancy
if(V0 == AT)		;Draw Triangle command
{
	...
} ;802AF700

AT = 0xB1000000
A0 = S0			;not S1 this time
if(V0 == AT)		;Draw 2 Triangles command
{
	T5 = word from S2 ;S2=8015F58C; =0x283
	A1 = S4 << 0x18	;S4=0xFFFFFFFF, so =0xFF000000
	T7 = A1 >> 0x18 ;=0xFFFFFFFF
	T6 = T5 + 1 ;=0x284
	word at S2 = T6
	A1 = T7
	A2 = S5 & 0xFFFF
	call 802AEB14
	S6++
	goto 802AF778
} ;802AF738

AT = 0xB5000000
A0 = S1
if(V0 == AT)		;Draw Line command
{
	...
} ;802AF76C

AT = 0xB8000000
S6++
if(V0 != AT)		;not End Display List command
{
	AT = 0x1FFF
	S3 += 8
	if(S6 != AT) goto 802AF66C ;read the next command
	return
} ;802AF784

So bytes 1-3 specify an offset into the generated RSP data
80150258 might be the RSP segment pointers... the first byte is used as an index
notice they don't have the high bit set

My guess would be it parses the generated commands to see what polygons are generated from them
starting at the given offset and adds those polygons to the collision map using the specified
surface type.


 0  1  2  3  4  5  6  7
07 00 17 D8 01 01 00 00
0: Always 7? 0 seems to mark end of data, any other value crashes
1-3: probably an offset, maybe into segment 7; changing them breaks entire game, swapping them
     breaks graphics
4: Surface type
5: Dlist related
6: ?
7: ?
1, 6 and 7 always seem to be zero

typedef struct {
	u8 Type;
	u8 DList;
	u16 Unknown;
	u32 NumVertices;
	u32* Vertex;
} MK64Surface;

RSPData
RSPDataSize

Surface
NumSurfaces

04 nd bb bb aa aa aa aa - Load Vertex
n=# of vertices - 1
d=Vertex cache index to load to
b=# of bytes of vertex data (redundant? always 0x10 per vertex)
a=Address to load from

06 ?? ?? ?? ss aa aa aa - Display List
s=Segment # ("bank")
a=Address within this segment

B1 aa bb cc ?? dd ee ff - Draw 2 Triangles
a, b, c=Vertex #s * 2 that form the first triangle
d, e, f=Vertex #s * 2 that form the second triangle

B5 .. .. .. ?? vv vv vv - Draw Line
v=vertex # (probably times something)

BF .. .. .. nn vv vv vv - Draw Triangle
n=Vertex # to get normal/colour from for flat shading
v=Vertex # * 10 (should be * 2?)
 This documentation may be wrong (written for another game). The command probably works like 0xB1, but with only 3 vertices.



0040 makes the polygon tangible from both sides instead of just the front.
a lot of transparent ones have 0080, but not all, and some nontransparent do too
0020 is only the track in Banshee Boardwalk and Luigi Raceway

Byte 6, 7:
Choco Mountain rock walls and guardrail have 0080
Banshee Boardwalk track has 0020, guardrail, house walls, bat box have 0080
Yoshi Valley fences 0080
Royal Raceway guardrails 0040
Luigi Raceway track 0020
Kalimari Desert guardrails 0040
DK Jungle some walls 0040 - the ones with no culling; guardrails 0040 (0080 surrounding booster)

Types:
01: Pavement (00, 07, 08, 10), walls/floor of tunnel (06), rainbow track (13)
02: Dirt track (01, 04, 09, 11, 14, 18), edge of pools (07)
03: Dirt track (06, 07), out-of-bounds beach sand (06)
04: Concrete (track, walls, Bowser statue) (02, 03, 07 (castle))
05: Snow track (05), ice cave floor/walls/ceiliing (not pillars) (12)
06: Track and guardrails; wood? (03), bridges near/into castle (07), wood holding up boost ramp (18)
07: Dirt (00, 08)
08: Grass (both in and out of bounds) (00, 02, 04, 07, 08, 09, 18)
09: Ice track (both in and out of bounds) (12)
0A: Beach sand (06)
0B: Off-track snow (05)
0C: Chocolate walls (01), rock walls (06)
0D: Off-track dirt (11)
0E: Train tracks and dirt surrounding them (11)
0F: Cave interior (18)
10: Rickety wood/rope bridge (02, 18)
11: Solid wooden bridge (02, 05)

FF is also ramps in Koopa Beach


00 Mario Raceway:
0000 - 5227 Display lists
5228 - 5567 Unused dlist?
5568 - 674F Course paths
6750 - 949F ?
94A0 - 9517 Item boxes
9518 - 951F ?
9520 - 956F Piranha plants
9570 - 9577 ?
9578 - 964F Trees
9650 - 97EF Surface map
97F7 EOF

01 Choco Mountain:
0000 - 447F Display lists
4480 - 448F Another course path?
4490 - 5ADF Course paths
5AE0 - 7237 ?
7238 - 724F Falling rocks
7258 - 72CF Item boxes
72D0 - 74FF Surface map
7507 EOF

02 Bowser's Castle
0000 - 4F8F Display lists
4F90 - 6737 Course paths
6738 - 9297 ?
9298 - 936F Trees
9378 - 93D7 Item boxes
93D8 - 94F7 Surface map
94FF EOF

03 Banshee Boardwalk
0000 - 009F ??? Looks like dlists, but first command is end dlist
00A0 - 4577 Display lists
4578 - 5C7F Course paths
5C80 - B457 ?
B458 - B5D7 Surface map
B5DF EOF

04 Yoshi Valley
*No dlist ptrs found
0000 - D77F Display lists
D780 - DC27 Probably more display lists
DC28 - F67F Course paths
F680 - 180A7 ?
180A8 - 1810F Trees
18118 - 1823F Item boxes
18240 - 183E7 Surface map
185DF EOF

05 Frappe Snowland
*No dlist ptrs found
0000 - 349F Display lists
34A0 - 34B7 Another course path?
34B8 - 4B1F Course paths
4B20 - 771F ?
7720 - 780F Trees
7818 - 788F Item boxes
79A0 - 7B17 Surface map
7B1F EOF

06 Koopa Beach
*No dlist ptrs found
0000 - ADDF Display lists (notice a few calling segment 6)
ADE0 - ADFF Another course path?
AE00 - C4AF Course paths
C4B0 - 18E7F ?
18E80 - 18F6F Item boxes
18F78 - 18FD7 Palm trees
18FD8 - 1931F Surface map
19320 - 197C7 ?
197C7 EOF

07 Royal Raceway
0000 - B5B7 Display lists
B5B8 - B6D7 Another course path?
B6D8 - D45F Course paths
D460 - D9F7 ?
D9F8 - DA77 Piranha plants
DA80 - DB7F Trees
DB88 - DC27 Item boxes
DC28 - DFD7 Surface map
DFDF EOF

08 Luigi Raceway
0000 - A53F Display lists
A540 - BA8F Course paths
BA90 - FDEF ?
FDF0 - FE7F Item boxes
FE88 - FF27 Trees
FF28 - 102A7 Surface map
102AF EOF

09 Moo Moo Farm
0000 - 0087 Unused dlists?
0088 - EC7F Display lists
EC80 - FC6F Course paths
FC70 - 14437 ?
14438 - 143DF Trees
143E8 - 144B7 Item boxes
144B8 - 14717 Surface map
1471F EOF

0A Toad's Turnpike
*Only one dlist ptr?
0000 - 3B7F Display lists (some calling segment 6)
3B80 - 59BF Course paths
59C0 - 23AE7 ?
23AE8 - 23B67 Item boxes
23B68 - 23C17 Surface map
23C1F EOF

0B Kalimari Desert
0000 - 6AC7 Display lists
6AC8 - 837F Course paths
8380 - 22E8F ?
22E90 - 22F07 Item boxes
22F10 - 2306F Trees
23070 - 23397 Surface map
2339F EOF

0C Sherbet Land
0000 - 4BF7 Display lists (many of which do nothing, or at least don't call any others O_o)
4BF8 - 4C0F Another course path?
4C08 - 62B7 Course paths
62B8 - 9B87 ?
9B88 - 9C1F Item boxes
9C20 - 9CD7 Surface map
9CDF EOF

0D Rainbow Road
*No dlist ptrs found
0000 - 19CF Display lists
19D0 - 53FF Course paths
5400 - 1633F ?
16340 - 13438 Item boxes
16440 - 164AF Surface map
16577 EOF

0E Wario Stadium
0000 - 569F Display lists
56A0 - 84CF Course paths
84D0 - CB47 ?
CB48 - CC37 Item boxes
CC38 - CD2F Surface map
CD37 EOF

0F Block Fort
0000 - 0037 Display lists
0038 - 015F Item boxes
015F EOF

10 Skyscraper
0000 - 007F Display lists
0080 - 0147 Item boxes
0147 EOF

11 Double Deck
0000 - 0027 Display lists
0028 - 017F Item boxes
017F EOF

12 DK Jungle
*No dlist ptrs found
0000 - 71EF Display lists
71F0 - 8EB7 Course paths
8EB8 - 13EC7 ?
13EC8 - 13F77 Item boxes
14338 - 146C7 Surface map
146CF EOF

13 Big Donut
0000 - 0057 Display lists
0058 - 011F Item boxes
011F EOF