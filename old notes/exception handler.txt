Let's decode the exception handler!
80000180 jumps to 800D11C0
This is both the exception handler and interrupt handler.
Tables from the R4300i manual:
COP0 Registers:
00 Index	08 BadVAddr	16 Config	24 Unused
01 Random	09 Count	17 LLAddr	25 Unused
02 EntryLo0	10 EntryHi	18 WatchLo	26 PErr
03 EntryLo1	11 Compare	19 WatchHi	27 CacheErr
04 Context	12 SR		20 XContext	28 TagLo
05 PageMask	13 Cause	21 Unused	29 TagHi
06 Wired	14 EPC		22 Unused	30 ErrorEPC
07 Unused	15 PRid		23 Unused	31 Unused

R4300i register names:
00=zero 04=A0  08=T0  12=T4  16=S0  20=S4  24=T8  28=GP
01=AT   05=A1  09=T1  13=T5  17=S1  21=S5  25=T9  29=SP
02=V0   06=A2  10=T2  14=T6  18=S2  22=S6  26=K0  30=S8
03=V1   07=A3  11=T3  15=T7  19=S3  23=S7  27=K1  31=RA

bits 6-2 in Cause register specify what happened; of particular interest:
0: Interrupt
8: SysCall
9: Breakpoint
23: Reference to WatchHi/WatchLo address

K0 = 0x801976A0
various register state is stored at K0
it loads a word from A430000C and stores it at K0+0128
at 800D13C0 it's jumping to pointers found at 800F3A20, using bytes found at 800F3A00 as an index

800D11F0 reads the Cause into r8... and then discards it?
800D1374 reads it after storing all registers, and stores it at $K0 [801524C0] + 0120
it then masks out just the exception-code bits (into r9) and checks for codes 9 (breakpoint),
11 (Coprocessor unusable), anything other than 0 (interrupt)
at 800D13A4 is a branch that ultimately asks whether this is an interrupt or not... if not it
branches to 800D16B4

looks like some exceptions cause it to jump to 80000000, but that also jumps to 800D11C0

so what DOES it do with an actual exception? (in this case, changing 8009F988 to 8DA7EE00 generates a TLB load exception by pressing R at the title screen.)
$T0 contains the error code (cause)
$K0 + 0010 [801589E0] is set to 0001
$K0 + 0012 is set to 0002
BadVAddr is stored at $K0 + 0124
it calls 800D16E4 with $A0=0060, then jumps from 800D1694 to 800D1924... eventually it jumps back to that jump
to dump exception info we could replace that call with our own routine that then jumps to the original, and copies the register dump found at $K0 to a safe place around say 80500000... a quick power cycle then should leave the information intact

800D16E4
$A0 is an index into 80196440, which is a table of words
the word it reads here is 80162D40
since that isn't zero, it uses that as a pointer (into $T1),
reads two words from $T1 + 0008 and 0010 to $T3 and $T4
$AT = ($T3 < $T4)
if so, $T5 = ((word from ($T1 + 000C)) + $T3)

at 800D12DC it reads from A430000C, which is PI, SI, DMA
looks like joystick data is BFC007C4 (player 1), BFC007CC (player 2), etc
there's some init and such to do but that's the gist of it

800CD5E8 is reading controller state and copying it to 80162CC0 and 8014F0F0

800CD618 reads 80162CC0
this is some kind of loop, counting up to 0xF, and then checking input
800D7B74 is called from here after the loop, and reads A4800018, which IIRC is RSP status or something

80162D60 is some type of counter word, waiting for a code to be input
pressing the right button increments it, any other resets to zero
this is handled around 8000462C, the code is stored as a series of 16-bit values at 800DC6FC
code is: L, Up, Left, Down, Right, R, L, B, A
0020 0800 0200 0400 0100 0010 0020 4000 8000 FFFF
this is the crash debug screen alright; 3 lines:

5-80400088-05
8009F980
00000000

First is unknown (thread ID?), PC, exception code; second is RA; third always 0?
80400088 is just an ADDIU but it's surrounded by stores so probably one of them broke it

810DC6FE FFFF will make it so you only need to press L
could probably find such in other games by searching for a series of 16-bit values, all having only a single bit set, followed by FFFF... wouldn't work though in e.g. Zelda that requires you to hold multiple buttons

0100 Right	0001 C-Right
0200 Left	0002 C-Left
0400 Down	0004 C-Down
0800 Up		0008 C-Up
1000 Start	0010 R
2000 Z		0020 L
4000 B
8000 A


800CD54C reads 80162CC0

8000097C reads 8014F0F0, checks for C-down, if it's pressed, sets the Z bit and stores it back
so the game basically maps C-down to Z at all times... could hack this

80000990 reads input, XORs it with stuff... probably handling the buttons pressed/held

800F6910 looks like the input the game actually uses

800D1914 is odd:
u32* _800D1914(u32 *A0) {
	u32 *x = (*A0);	//LW $V0, 0000($A0)
	(*A0) = (*x);	//LW $T9, 0000($V0)
	return x;	//JR $RA  SW $T9, 0000($A0)
}

looking at the text dump, I suspect there *is* no exception screen. fffff
can we rig the emulator to warn of any unaligned access? a likely problem
or safely exit the routine early and narrow down the crash, by patching it in RAM before running
the emu doesn't care about unaligned access but the real thing locks up

interesting side note, look at 800EC121:
extern POINT rom_center_KT%d_BP%d[] = {
{%d,%d,%d,%d},
0x8000,0x8000,0x8000,0.};
area read from ROM (%d)
this gives some insight into how the paths were coded and suggests they plotted them with an in-game tool which then output this code. maybe it's still in there?

800E86F4 is "01" and "NKTJ" which would be the identifier of the Japanese MK64 ROM... shortly after, lots of sound debug text