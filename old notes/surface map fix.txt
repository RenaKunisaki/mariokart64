MK64: Fixing the surface map issues in the new track
See also: mk64 notes Aug 9 2008.txt

The routine patched is called at ROM 0x118AC4, RAM 802AF4B4; this is where the 
 patch is applied.
800F69A4 is player coords.

Loading RR in unhacked ROM:
802AF4B4, which is the JAL we patched to work around the issue, is called with 
 params FFFFFF85 0000005F FFFFEA8D
looks like coords (-123 95 -5491); as floats: C2F60000 42BE0000 C5AB9800
when this is called the player data isn't even set yet, it's all zeros
these values don't occurr in RAM, nor any loads of them

The opcode for the JAL is 0C0ABC3F, the patched value is 24020001


//Variables that are used without being defined are set before the function
//is called.
#define TRUNC16(x) (((x_ << 16) >> 16) //Reduce to 16-bit signed int
u8 RSP[16][8 * 1024 * 1024]; //RSP segments
u16 *S4;
void _802AF314() //called from 80295D10
{
	u32 stack4; //SP + 0x10
	u16 arr1[2048]; //at 0x8014F110
	u16 *p1 = 0x8015F6E8; //looks like coords: 08AA F263 05F0 FFEC
	                  //1024 EAA1 0BB8 F448 - no other occurrence of this string
	u16 *p2; //at 0x8015F584
	u16 Count; //at 8015F588, set before calling
	T6 = p1[0];
	T7 = p1[1];
	T8 = p1[4];
	T9 = p1[5];

	//802AF338
	A0 = T6 - T7;
	A1 = T8 - T9;
	for(int i = 0; i < 2048; i += 8)
	{
		//not sure if this is correct
		arr1[i + 3] = 0;
		arr1[i + 5] = 0;
		arr1[i + 7] = 0;
		arr1[i + 1] = 0;
	}

	//802AF390
	*(u16*)0x8015F58A = 0;
	p2 = p1[32]; //*(u32*)0x8015F728;
	S7 = 0;
	
	if(A0 >= 0) S6 = A0 / 32;
	else S6 = (A0 + 31) / 32;
	
	if(A1 >= 0) S8 = A1 / 32;
	else S8 = (A1 + 31) / 32;
	
	for(int i = 0; i < 32; i++)
	{
		for(j = 0; j < 32; j++)
		{
			T3 = S6 * j;
			
			//802AF3F0
			S1 = TRUNC16((p1[1] + T3) - 20);
			S2 = TRUNC16((p1[5] + (S8 * i)) - 20);
			
			int Idx = 0;
			int k = 0; //$S0
			do {
				A3 = (S2 + S8) + 40;
				u16 *Coord = &RSP[15][Idx]; //this seems to be reading coords -
					//RSP seg15 has processed surface maps in it
				Idx += 22;
				A1 = TRUNC16((S1 + S6) + 40);
				k++;
				
				//802AF448
				//This refers to the halfwords in the processed surface map
				//data,  at offsets 0x0E, 0x08, 0x0A, 0x04. Unfortunately, I
				//don't know  what any of them do.
				if(Coord[7] < S2) continue;
				if(TRUNC16(A3) < Coord[4]) continue;
				if(Coord[5] > S1) continue;
				if(A1 < Coord[2]) continue;
				
				stack4 = k - 1; //this variable doesn't seem to be used... maybe
				//as a param to this function?
				
				/* The parameters that end up being passed on the first
				 * iteration in RR are:
				 * 0xFFFFFF85, 0x5F, 0xFFFFEA8D, 0xFFFFEBE1 which are -123, 95, 
				 *  -5491, -5151
				 * stack4 is 0x69 which is 105, so it's rejected 105 elements of 
				 * this array before even
				 * getting here
				 * The patch changes this call to effectively if(1 == 1), so
				 * this is getting called even in the hack, but that doesn't 
				 * necessarily mean it's this routine that's the problem. Need
				 * to figure out just what it's checking up there before
				 * rejecting the coords. This routine probably checks something 
				 * coord-related to see whether that poly can be used, so it's
				 * possible none of the polys that pass the earlier tests can
				 * be.
				 * This function only seems to be called when loading a track,
				 * so it looks like the only purpose is to check which surface
				 * poly you start on. This is the only call to this function.
				 */
				if(_802AF0FC(TRUNC16(S1), A1, TRUNC16(S2), A3) == 1)
				{				
					//802AF4BC
					u16 *V0 = &arr1[((i * 32) + j) * 2];
					if(!V0[1]) V0[0] = *S4;
					
					V0[1]++;
					p2[*S4] = k - 1; //this is storing the map index at
					//801F4C86 as described below
					//I think the real question is does this part here execute
					//in the hacked ROM, without the patched JAL? If so, then
					//it's the part that reads this index that's broken. Though
					//I doubt that's the case.
					//If not, then we should try to figure out what those coords 
					//are that it looks at; look at how it converts the map data 
					//from ROM into that struct to see where all
					//the rest comes from.
					
					(*S4)++;
				}
				//802AF52C
			} while(k >= Count);
		}
	}
	
	_802AF558: //end of routine
}

//assuming A3 is u16
int _802AF0FC(u16 A0, u16 A1, u16 A2, u16 A3)
{
	//routine ends at 802AF30C, just before the one above oh god it's fucking
	//huge and has JALs in it
	//though really only 132 instructions
}

802ACB6C is where the map# is stored, from $A1
at 802ACB50 is an unknown COP1 opcode (4608903C), and it's doing some funfun
 square roots and such above that
Renegade says C.LT.S F18,F8
and for some reason it keeps displaying "ROUND.L.S" as "ROUND.L.?" until
 scrolling a bit, and both
 45000014 and 4500000C show "ROUND.L.S $F0, $F0" when this happens, which is odd
SQRT is doing this too, seems like it shows as ? when it's one of the first 2 
 instructions displayed
 -this is probably all fixed now, and I doubt those SQRT instructions really 
  existed; COP1 disassembly was not working properly.
before this store the only reference I see to $A1 is another store at 802ACAFC
ought to be a function that you give it an address and it looks back through the 
 routine to see where a certain register is set
$A1 is loaded all the way back at 802AC768 from LHU 008E($SP), which begs the 
 question of how it got there
I think the calling function would have had to store it at 0016($SP)
this function starts at 802AC760, and is called at 802ADA04, here we can see
 some "ADD.?" too
it stores word $V0 at 0014($SP), as soon as the race actually starts and you
 have  control
it's also called from 802ADC8C, which seems to be doing the same thing, but this 
 runs during loading instead
this runs multiple times with $V0 being 0x0C, 0x0D, 0x1E, 0x1F, and then 0x20
At 802ADC20: LHU $V0, 0000($T1); $T1 = 801F4C86, 801F4C88, 801F4C8A, 801F4C8C, 
 801F4C8E, sure enough it looks like an array of map indexes; written at
 802AF510 from $S0
 that's somewhere up in _802AF314(), inside the if after calling the subroutine;
 $S0 is k

I just fixed a bunch of bugs in the COP1 instruction disassembly. It's possible 
 some of the code in _802AF314() was disassembled incorrectly due to these bugs.
 I didn't notice anything really odd though, and it doesn't really do anything
 involving floating-point, so probably not.

Let's trace writing the processed surface map data.
Raw data (dlist, surface, dlist idx, flags):
 06:016580 01 01 0000|06:016640 FE 01 0000|06:016660 01 01 0000
 Found at 801E2F40, read at 80290CF4, routine begins at 80290CAC


In the hacked ROM, some values do get stored in the array at 801F4C86
(but it's moved to 801E4080); it seems to go into a loop:
801E4080|00 18 00 19|00 18 00 19|00 18 00 19|00 16 00 17|................
801E4090|00 18 00 19|00 16 00 17|00 18 00 19|00 16 00 17|................
801E40A0|00 16 00 17|00 16 00 17|00 16 00 17|00 14 00 15|................
801E40B0|00 16 00 17|00 14 00 15|00 14 00 15|00 06 00 07|................
801E40C0|00 06 00 07|00 06 00 07|00 08 00 09|00 08 00 09|................
801E40D0|00 08 00 09|00 08 00 09|00 08 00 09|00 08 00 09|................
801E40E0|00 0A 00 0B|00 0A 00 0B|00 0A 00 0B|00 18 00 19|................
801E40F0|00 18 00 19|00 18 00 19|00 16 00 17|00 18 00 19|................
801E4100|00 16 00 17|00 18 00 19|00 16 00 17|00 16 00 17|................
~~~~
801E4310|00 02 00 03|00 18 00 19|00 18 00 19|00 18 00 19|................
801E4320|00 18 00 19|00 18 00 19|00 10 00 11|00 10 00 11|................
801E4330|00 10 00 11|00 10 00 11|00 10 00 11|00 10 00 11|................
801E4340|00 10 00 11|00 02 00 03|00 02 00 03|00 02 00 03|................
801E4350|00 02 00 03|00 02 00 03|00 02 00 03|00 02 00 03|................
801E4360|00 02 00 03|00 0C 00 0D|00 02 00 03|00 0C 00 0D|................
801E4370|00 02 00 03|00 0C 00 0D|00 02 00 03|00 00 00 01|................
etc... looks like it ends around 801E4B90, where some graphics start
so for some reason it's picked up a ton of maps, probably every one several
times, and isn't using any of them

Let's trace the surface map parsing to see where it's getting this data
New track surface map:
Parsing surface map at 06:016440
Parsing DList 06:016580 for surface map... Parsed 18 commands
Parsing DList 06:016640 for surface map... Parsed 3 commands
Parsing DList 06:016660 for surface map... Parsed 19 commands
Read 40 commands; found 3 surfaces.
Raw data: 06:016580 01 01 0000|06:016640 FE 01 0000|06:016660 01 01 0000
found at 801E2F40
Processed map data is at 801E36E0 - before processing, an MIO0 file is here:
4D494F30 0000B822 00001714 00001714 is its header

802AEA98 writes $A1 (1) to the first halfword
802AEAEC ORs it with 0x4000, not sure where that number is coming from.
The routine is 802AE434 - 802AEB10

This reads the surface maps.
The processed map data is written from within this function.

Vertex *VtxPtrs = 0x8015F668;

/* Processes the surface maps.
 * Inputs:
 * -Map: Pointer (RSP address) to raw surface map data to process.
 * RAM address: 80290CAC - 80290DA8
 * Notes:
 * -Todo: is it possible for this function to be called repeatedly for multiple
 *  maps, or would that overwrite the earlier ones? Can it be hacked to support
 *  this, so that maybe a hack could have dynamic surface maps?
 */
void ReadSurfaceMaps(SurfaceMap *Map)
{
	//(reserve 48 bytes of stack and push S0, S1, S2, S3, S4, RA at 0x18)
	Map = RSP2RAM(Map);
	while(Map->DlistPtr)
	{
		if(Map->Flags & 0x8000) word_at_8015F5A0 = 1
		else word_at_8015F5A0 = 0
		
		if(Map->Flags & 0x2000) word_at_8015F59C = 1
		else word_at_8015F59C = 0
		
		if(Map->Flags & 0x4000) word_at_8015F5A4 = 1
		else word_at_8015F5A4 = 0
		
		ParseDlistForSurfaceMap(Map->DlistPtr, Map->SurfaceType, Map->DlistIdx);
		Map++;
	}
	//(pop S0, S1, S2, S3, S4, RA from 0x18 and restore SP)
}

/* Parses a display list to create a surface map from it.
 * Inputs:
 * -DlistPtr: Pointer (RSP address) to display list to parse.
 * -SurfaceType: Surface type of the created map.
 * -DlistIdx: Display list index the created map will call.
 * RAM address: 802AF5D8 - 802AF7B0
 * Notes:
 * -Code based on previous disassembly, could be incorrect but probably not
 * -Interestingly, DlistIdx seems to be 16-bit, even though the raw data only
 *  uses one byte for it.
 */
void ParseDlistForSurfaceMap(DisplayList *DlistPtr, u8 SurfaceType,
	u16 DlistIdx)
{
	DlistPtr = RSP2RAM(DlistPtr);
	word_at_8015F6FA = 0;
	word_at_8015F6FC = 0;
	
	for(i=0; i<2048; i++)
	{
		//this switch is actually if/else if/else if... in the game
		switch(DlistPtr->Byte[0])
		{
			case 0x06: //Call Dlist
				ParseDlistForSurfaceMap(DlistPtr->LowWord, SurfaceType,
					DlistIdx);
			break;
			
			case 0x04:	//Load Vtx
				//Second param is # vertices. Third is ???
				//The low word of the command is the RSP address to load
				//vertices from.
				_802AED6C(DlistPtr->LowWord, (DlistPtr->HighWord >> 10) & 0x3F,
					DlistPtr->Byte[1] >> 1);
			break;
			
			case 0xBF: //Triangle
				_802AEB14(); //todo: params?
			break;
			
			case 0xB1: //2 Triangles
				word_at_8015F58C += 2;
				_802AEBA4(DlistPtr->LowWord, DlistPtr->LowWord, SurfaceType, 
					DlistIdx);
			break;
			
			case 0xB5: //Line
				_802AECA0(); //todo: params?
			break;
			
			case 0xB8: return; //End List
		}
		DlistPtr++;
	}
}

/* Called from ParseDlistForSurfaceMap for Load Vtx command.
 * Inputs:
 * -VtxAddr: The lower half of the Load Vtx command itself, i.e. the RSP address
 *  to load vertices from.
 * -NumVtxs: The number of vertices the command loads.
 * -Byte2: The second byte of the command right-shifted once, which seems to be
 *  the position in the vertex cache to load these vertices.
 * RAM address: 802AED6C - 802AEE18
 */
void ParseLoadVtxForSurfaceMap(u32 VtxAddr, u32 NumVtxs, u8 Byte2)
{
	Vertex *VtxPtr; //Processed vertex, i.e. 16 byts
	int i = 0;
	
	VtxAddr = RSP2RAM(VtxAddr);
	if(!NumVtxs) return;
	
	//Copy until # vtxs is a multiple of 4
	if(NumVtxs & 3)
	{
		VtxPtr = (Byte2 << 2) + VtxPtrs;
		
		for(; i != NumVtxs & 3; i++)
		{
			*VtxPtr = VtxAddr;
			VtxAddr += 0x10;
			Byte2++;
			VtxPtr++;
		}
		
		if(NumVtxs == i) return;
	}
	
	//802AEDD8 - copy 4 vtxs at a time
	for(; i != NumVtxs; i += 4)
	{
		VtxPtr = (Byte2 << 2) + VtxPtrs;
		VtxPtr[0] = VtxAddr;
		VtxPtr[1] = VtxAddr + sizeof(Vertex);
		VtxPtr[2] = VtxAddr + (sizeof(Vertex) * 2);
		VtxPtr[3] = VtxAddr + (sizeof(Vertex) * 2);
		VtxAddr += sizeof(Vertex);
	}
}


/* Called from ParseDlistForSurfaceMap for 2 Triangles command.
 * Inputs:
 * -HighWord, LowWord: The 2 Triangles command itself.
 * -SurfaceType: Surface type of the created map.
 * -DlistIdx: Display list index the created map will call.
 * RAM address: 802AEBA4 - 802AEC9C
 */
void Parse2TrisForSurfaceMap(u32 HighWord, u32 LowWord, u8 SurfaceType,
	u16 DlistIdx)
{
	//(reserve 88 bytes of stack space)
	
	stack5C = LowWord;
	stack58 = HighWord;
	stack64 = DlistIdx;
	stack60 = SurfaceType;
	stack28 = VtxPtrs[((LowWord & 0xFF0000) >> 16) >> 1];
	stack24 = VtxPtrs[((LowWord & 0xFF00) >> 8) >> 1];
	stack20 = VtxPtrs[(LowWord & 0xFF) >> 1];
	stack10 = halfword from stack 0x66;
	
	//not really sure how it works with reading bytes/halfwords from the stack
	//also I'm guessing this function takes 5 parameters, with stack10 being
	//the fifth
	_802AE434(
		VtxPtrs[((HighWord & 0xFF0000) >> 16) >> 1],
		VtxPtrs[((HighWord & 0xFF00) >> 8) >> 1],
		VtxPtrs[(HighWord & 0xFF) >> 1],
		byte from stack 0x63);
	
	T3 = halfword from stack 0x10;
	A0 = stack28;
	A1 = stack24;
	A2 = stack20;
	
	A3 = byte from stack 0x63;
	stack10 = T3;
	_802AE434();
	//(restore SP)
}

The "unused" second byte of Load Vtx (0x04) seems to do something related to
memory, changing it can corrupt things - 0x10 changes various textures, 0x02
breaks some geometry and matrices.
I think it's a red herring, it always appears to be zero and I don't remember
seeing any code that sets it. Possibly it specifies where in the vertex cache to
load. Also note that it uses this value >> 1.
I do think it's some sort of cache index though. It doesn't corrupt memory when
you set it to 4 in a command that loads 16 vtxs, but does if it loads 32. That
would suggest it's loading into the 4th position of a 32-element array. Should
experiment with this later.
Removing the 3rd surface map makes me start way up in the air...

Processed surface map is in RAM at 801E370C in new track, but is this the copy
that's actually used, or another dummy? No time to play with it right now. Bed.

Segment view needs to use buffers or something, it's requesting one byte at a
time in the hex editor
Also if I try to scroll down past 807FF0F0, it takes me to 803FFF00.
Trying to increase the hex editor's width too far crashes it.

Copied from mk64levelhacking <<
The surface map data in RAM contains more information, which is largely undocumented. Each entry is 44 (0x2C) bytes:
   00: Some sort of flag byte. Changing values here can cause different 
       effects when you touch the polygon, such as tumbling.
   01: Seems to specify a display list ID to render when touching this surface.
   02: ?
   03: Surface type.
04-07: ?
08-0F: Looks like coordinates, but only 2 dimensions. If we change these 
       significantly, the surface (but not the graphics) disappears.
10-1B: Pointers to vertex data. Changing these also makes it disappear. The 
       coordinates of the surface polygon probably come from these vertices.
1C-1F: ?
20-23: Float related to gravity, normally 1.0. Changing this can make you 
       slowly sink into the polygon, or fly into the air.
24-2B: Related to Lakitu dropoff positioning? >>

The first map is 06:016580 01 01 0000; the dlist here:
06:016580 BB000001FFFFFFFF Start Dlist/Texture
06:016588 BA000C0200002000 Set Other Mode H
06:016590 BA00130100080000 Set Other Mode H
06:016598 B9000314005049D8 Set Other Mode L
06:0165A0 40082000400C270 Load Vtx
06:0165A8 B104020000060400 Tri (2, 1, 0), (3, 2, 0)
06:0165B0 B10C0A08000E0C08 Tri (6, 5, 4), (7, 6, 4)
06:0165B8 B114121000161410 Tri (10, 9, 8), (11, 10, 8)
06:0165C0 B11C1A18001E1C18 Tri (14, 13, 12), (15, 14, 12)
06:0165C8 B124222000262420 Tri (18, 17, 16), (19, 18, 16)
06:0165D0 B12C2A28002E2C28 Tri (22, 21, 20), (23, 22, 20)
06:0165D8 B134323000363430 Tri (26, 25, 24), (27, 26, 24)
06:0165E0 B13C3A38003E3C38 Tri (30, 29, 28), (31, 30, 28)
06:0165E8 40041000400C470 Load Vtx
06:0165F0 B104020000060400 Tri (2, 1, 0), (3, 2, 0)
06:0165F8 B10C0A08000E0C08 Tri (6, 5, 4), (7, 6, 4)
06:016600 B114121000161410 Tri (10, 9, 8), (11, 10, 8)
06:016608 B11C1A18001E1C18 Tri (14, 13, 12), (15, 14, 12)
06:016610 B800000000000000 End Dlist

First in new track at 801E370C:
4001 0001|FFAF 05E4|FD0C 005F|05E5 00FF
807F F030|807F F020|807F F000|0000 0000
3F7F FFF9|BA81 A556|C4BC 97E9

And the vertices begin at 807FF000, so we can conclude that 10, 14 and 18 point
to the vertices that make up this polygon.

addr     X    Y    Z    ?    S    T    R  G  B  A
807FF000 FFAF 05E4 FD0C 0003 0000 0000 FC 00 00 6F
807FF010 005F 05E4 FD0C 0003 1000 0000 FC 00 00 6F
807FF020 005F 05E5 00FF 0000 1000 4000 00 00 FF 6F
The ? is added by the game when copying to RAM, it's not present in ROM. I can't
see what it does if anything. Values seen: 3, 0, C, F

We can also see that 4=X, 6=Y, 8=Z, copied directly from the vertex data. Not
sure why it stores both the coordinates and a pointer...
This first vertex is the front left corner of the quad you start on, in red.

The game does some Weird Shit(tm) with hit detection; it seems to test against
both the vertex data and the copy of the coords in the map; if you aren't over
both, you fall, but this only seems to happen on certain parts of the polygon?
Maybe on other parts you're still overtop of another polygon? It's not just
copying one set of coords to the other, it's checking both... though I can sit
in some places and change the Y of the vertex, and not fall, but change the Y of
the map, and fall. Right next to the left-side finish line pole is one such 
place. If I change the vertex's X here, I do fall. If I change the Z, it looks
like I fall and bounce off another polygon, which sends me tumbling; there seems
to be some overlap of vertices here. Could that be why? But in Mario Raceway
doesn't the track sit right on top of the grass?
If I change the map's X or Z, I also fall. The graphics don't move like they do
if I change the vertex coords though. Weird shit. Perhaps this is the same bug;
some aspect of my track is confusing the hit detection making it test
redundantly?
0A-0F is a copy of the coords at 807FF020. So 04-09 is coords of the 3rd vertex,
and 0A-0F the second. But the first (here 807FF030) is not copied.
It does similar weird shit with those coords. It seems to be testing against all
three of the vertices pointed to, plus the coords in the map, and requiring you
to be above both triangles, or you fall. If we change the coords in the map
itself, or the vertex pointers, we fall.
No idea what 02 is doing if anything. It has no apparent effect even if we
change surface type, pointers, or coords.
I get a read of this at 802AFF84 if I drive from the second quad toward the
finish line on the right side, about halfway. It's copied to 800F6B4C.
When I drive around a bit this value becomes 01 and stays there until I fall
off. If I set the flags to 80 and drive back as mentioned earlier, it gets set
to 0 and I fall through. I'm not seeing it being set to the value I specified
at all. When it gets set to 1 the next 3 bytes, which also don't seem to do
much, get set to 40 00 01. It also gets set to 0 if I hit a chomp.

800F6B40 looks like player coords.
http://radthad.net/stuff/videogames/codes/mariokart.php some codes I haven't
seen before. It mentions 800F6B4C in part of a code that makes dirt not slow
you down, so maybe this is terrain-related.
Looks that way, in Luigi Raceway: 01=pavement, 07=dirt, 08=grass. Interestingly,
those just happen to be the surface types for these substances. Which is pretty
damn odd, because there's already a surface type byte here. This byte must
determine the surface type in certain cases; maybe if you're on the other side
of the polygon, or above it or something? Mess with this shit. Try setting it
to 1 before GP mode begins.

1C-1F is a word that gets read into a float register at 802AB1A4 if I drive on
the left toward the second polygon, just as I near the edge. I suspect the
surface maps overlap here for some reason, so this would be when I'm passing to
the next map. It gets multiplied by $F10, which in this case is about 0.5,
then added to $F8 which is 1, then some more stuff... Setting it to 1.0 makes me
fall through the track; -1.0 makes me fall through at a 45-degree angle.
10.0 makes me fall through, and then Lakitu tries to drop me off below the
track, and just holds me there, inching upward, until I set it back to 0.
-10.0 has a similar effect; he tries to put me in the air at roughly the height
of the finish line banner, stutters a bit, then drops me and I fall through.
Setting it to -10.0 while sitting on it just makes me fall through. So this is
maybe related to height or depth.
 44BD42FF = 1514 the height of the track
~44C1A000 = 1549 when towed, I always respawn at this height, 35 above the track
~44CF0000 = 1656 with -10, he carries me up to this height before dropping
                back down, so 107 units up.
~44C60000 = 1584 with -5, he only carries me this high, 35 units up.
107 / 35 = ~3... these are rough numbers, and considering the exponential nature
of floats, it wouldn't surprise me to see that the actual difference is closer
to 2. I'm fairly willing to be that this value times 35 is the height Lakitu
will try to drop you at, but there has to be something there...
Setting this to 10 or -10 screws the GP start sequence right up.

The gravity value here is 3F7FFFF9 which rounds to 1 in my convertor. If I
change it to 2, I fall through, and Lakitu starts in what looks like the usual
place, but brings me way down to the camera, which is at 443D77F5 = 757.874,
which is half the height of the track. If I then change it to 1, he'll quickly
bring me back up.
If I set the other float to 1.0, he brings me down to 443CB7F5 = 754.874,
precisely 3 less than before.
When he brings me down he jumps back up once, then comes down and stops for a
few seconds, giving time to read out the coords.
If I set the first to -252.33333 and the second to 2, countering eachother out,
I fly off sideways at some crazy speed, and get towed back onto the boost ramp!
On coming back I just fall through, and Lakitu carries me way up (looks like
about 70 above), then dangles me right ON the track, but doesn't drop me.
While he's doing this, I set it to +252.3333 and back, and again I fly off at
some crazy speed, still in tow, and get put back on another piece of track.
Setting both to zero just makes me fall through, and respawn about halfway up to
the banner, get towed up to it, respawn, repeat this, and then get towed upward
forever. I would have expected a division by zero, but apparently not, unless
the game just ignores those and proceeds to use undefined values.

Any changes to this gravity value break the GP start sequence: everyone falls
through the track, respawns above it, and gets stuck there.

Last 2 words:
BA81A556 = ~-0.001, C4BC97E9 = -1508.75.
Changing the first one to 1.0 makes me fall through, bet you didn't expect that.
When put back I fall about halfway into the track, then seem to slide off
something at a near 45-degree angle, the opposite direction this time.
2.0, I respawn lower than usual (almost right on the track), and get lowered
through it, then dropped, and the same thing happens.
4.0, about the same but lower, and he jumps around before dropping.
-1.0, he appears to drop me on the track, but I bump and slide forward through
it.
-2.0, he drops me slightly above, and I fall through.
-4.0, drops me twice as high as before, jumping a bit, or respawns way under the
track, jumps up to it, and then drops me through. This seems to be some offset
for the respawn height, where using +/-4.0 has some odd effects, maybe integer
overflow given it was originally ~0.001.
0 seems to work as normal. I do also fall through using negative values.
-0.001 seems normal.
0.05 to 0.1, I rise slightly above the track. 0.2 I fall through, but get put
back on normally.
Odd things happen if you use 0.1 and switch the sign while sitting on it; I fell
in and slowly slid backward. The same happens if you hit a chomp at -0.1, except
I fall forward. It seems to act as if the surface is at an angle; I slide
forward a bit and stop under the track, where I can drive forward a little more
before falling off.
This seems to be some sort of angle value. At 0.1, the surface no longer matches
the graphics exactly; rather, it's like the entire quad becomes: __--¯¯------
as if it were split into two, and the rear one were tilted back. -0.1 tilts it
in the other direction. I can use bigger angles, but 0.4 is almost impossible to
stay on; you basically need a shroom. 0 works fine.

Last one, -1508.75, which is interesting because the track height is 1514. Like
the other, reducing it makes me lift slightly off the track, and increasing it
makes me sink in; -1504 puts me about halfway in, and if I drive toward the
right pole, I lift up to normal height as I approach it; there's a seam
travelling diagonally through the quad at which I'll pop back up, suggesting
this happens because I'm moving to another polygon.
This seems to be the polygon height, but I can only lower it so much before I'll
just fall right through, down to about -1488. And of course if I raise it by
more than my height, I'll plummet to my doom rather than raising with it.
It doesn't look like there's a maximum; if I raise it slowly enough to not fall
through, I seem to be able to go as high as I want. Increments of 0x8000 work
nicely. Lakitu is even nice enough to bring me up to this height sometimes.
Other times he'll be a jerk and just hover. Probably depends where I fall.
So this word seems to be something like (track height * -1) + 6. Odd.

802AEA98 is writing the map data. It seems to write the first halfword (flags
and dlist ID) last.

In GP mode I start at 1549.74, which is 35.74 above the track. Changing the
first two floats doesn't seem to affect this.

Oi, and I just now noticed the maps actually start at 801E36E0, and I was looking
at the second polygon. V_v

Updated struct:
00: Flags
01: Dlist ID
02: Alternate surface type? (Usually 0=none)
03: Surface type
04-09: X, Y and Z of 3rd vertex
0A-0F: X, Y and Z of 2nd vertex
10-1B: Pointers to the vertices that make up this triangle.
1C-1F: Float; Lakitu dropoff height?
20-23: Float; Gravity-related
24-27: Float; some sort of X axis rotation? Normally about -0.001; 0.4 seems to
       be around 45 degrees or more. Maybe angle = this * 100 or so. 128 seems
       like a good guess, that would make it a 51.2-degree slope.
28-2B: Negative track height? (Seems to get set to the track height times -1,
       plus about 6.
Seems like when you get towed, you respawn at
((TrackHeight + 35.0) / Float2) + Float1, where Float1 is the one at 1C, and
Float2 is at 20, and Lakitu lowers you 35.0 units and tries to drop you on
whatever polygon is there, if any. These seem to have other effects, as we've
seen in other tracks where they made gravity change as well.

Flags:
04: Player will tumble when touching this polygon, and might fall through..
08: Player is towed when sitting on this polygon.
40: Seems to be a "safe drop-off" flag; if not set, Lakitu will refuse to set
    you down here, and instead will just hold you indefinitely.
80: If I set this, drive to the next polygon, then turn around and drive back
    on what is now the far right side, I fall through. The game may freeze.
    This doesn't happen if I'm driving away from the finish line.
    Similarly if I go all the way back and drive from the green to the blue I'm
    fine, but as soon as I try to turn around and go back to the green, I fall
    right through.
    
The vertex pointers don't seem to have any influence in picking a starting
height.
Setting 1C to 1.0 has odd effects on the start sequence; players spin out and
slide around. -1.0 has almost the same effect, with the bonus of the camera
tilting and turning a bit.
Reversing the order of the vertex pointers has no effect.

801E36E0 is found at 8015AB0C, 8015F580, 8015F728. I think the best thing to do
here is to hack the level viewer to be able to render surface maps from RAM
dumps, and investigate those of other tracks.

Very interesting if we look at the first few polygons' coords and pointers:
(FFAF, 05E4, FD0C) (005F, 05E5, 00FF) 807FF020 807FF010 807FF000
(FFAF, 05E4, FD0C) (005F, 05E5, 00FF) 807FF030 807FF020 807FF000
(FA00, 05E5, FC00) (005F, 05E5, FD10) 807FF060 807FF050 807FF040
(FA00, 05E5, FC00) (005F, 05E5, FD10) 807FF070 807FF060 807FF040
The pointers are different, but the vertices are the same... the first two both
have the vertices from 807FF020 as the second set. "Fixing" this in RAM just
makes people fall through the track (front right polygon).


Expand the hex editor to 44 bytes, 4 lines (shrink first or boom), and use this
as a header in Mousepad:
Addr    |Fl Dl Tr St|X3 .. Y3 ..|Z3 .. X2 ..|Y2 .. Z2 ..|Vtx1       |Vtx2       |Vtx3       |DropHeight |Gravity    |XRot       |Height

After looking at the individual starting surfaces, I don't see anything
particularly unusual...
Surface map under finish
line:
Lv S# Addr      Tp Dl Flag <- S# is decimal surface map index, Tp=type, Dl=dlist
00 00 07:0017D8 01 01 0000
01 03 07:0049F0 02 01 0000
02 00 07:005448 04 01 0000
03 02 07:0027D0 06 01 0020
04 00 07:0044C8 02 01 0000
05 03 07:003F80 05 01 0000
06 01 07:000D70 03 01 0000
07 01 07:001FE8 01 01 0000
08 00 07:006B00 01 01 0020
09 00 07:0039F8 02 01 0000
0A 00 07:0032A0 01 01 0000
0B 00 07:008690 02 01 0000*
0B 19 07:008508 02 20 0000*
0C 00 07:001B20 09 01 0000
0D 00 06:016580 01 01 0000 <- This is the new track.
0E 00 07:008D28 02 01 0000
12 00 07:007DA0 02 01 0000

* This level has one surface that's just the finish line itself (#0), and one
that covers the area behind it (#19).

Big Donut renders severely broken and segfaults. Block Fort once segfaulted too.
Probably trying to render some nonexistent map or dlist.

Most are single quads under the starting point extending a fair ways back. Some
of them end right at the finish line.

Having looked at them, however, makes me wonder if mine simply doesn't extend
back far enough.

...no, it didn't.

When extending it we need to patch ROM 0xC19474 -> 00 to remove the last ramp,
else they'll start on it and land in midair. Or, we can try to move all vertices
back, thus moving the finish line forward... but then I'll have to move items,
paths etc too. I think I'll not do that.
However, in this case we need to move the last ramp, rather than deleting it,
because without it, it's impossible to reach the finish line.
The vertices should be at C459B6, let's tweak the positions.
C4592E: 0600
C4593C: 0600 - move the ramp out of the way
C453B6: 028F
C453C4: 028F - extend start quad back juuuust far enough to not penetrate ramp
and it finally works!


Calls to 802AF0FC in RR loading, params:
A0       A1       A2       A3       S0
FFFFFF85 0000005F FFFFEA8D FFFFEBE1 00000068
FFFFFF85 0000005F FFFFEA8D FFFFEBE1 00000069
FFFFFF85 0000005F FFFFEA8D FFFFEBE1 000004B8
FFFFFF85 0000005F FFFFEA8D FFFFEBE1 000004B9
00000037 00000111 FFFFEA8D FFFFEBE1 00000068
00000037 00000111 FFFFEA8D FFFFEBE1 00000069
00000037 00000111 FFFFEA8D FFFFEBE1 00000070
00000037 00000111 FFFFEA8D FFFFEBE1 00000071
00000037 00000111 FFFFEA8D FFFFEBE1 000004A8
00000037 00000111 FFFFEA8D FFFFEBE1 000004A9
00000037 00000111 FFFFEA8D FFFFEBE1 000004B0
00000037 00000111 FFFFEA8D FFFFEBE1 000004B1
00000037 00000111 FFFFEA8D FFFFEBE1 000004B6
00000037 00000111 FFFFEA8D FFFFEBE1 000004B7
00000037 00000111 FFFFEA8D FFFFEBE1 000004B8
00000037 00000111 FFFFEA8D FFFFEBE1 000004B9
000000E9 000001C3 FFFFEA8D FFFFEBE1 00000068
000000E9 000001C3 FFFFEA8D FFFFEBE1 00000069
000000E9 000001C3 FFFFEA8D FFFFEBE1 0000006C
000000E9 000001C3 FFFFEA8D FFFFEBE1 0000006D
000000E9 000001C3 FFFFEA8D FFFFEBE1 0000006E
000000E9 000001C3 FFFFEA8D FFFFEBE1 0000006F
000000E9 000001C3 FFFFEA8D FFFFEBE1 00000070
000000E9 000001C3 FFFFEA8D FFFFEBE1 00000071
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004A8
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004A9V0
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004AA
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004AB
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004AC
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004AD
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004AE
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004AF
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004B0
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004B1
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004B6
000000E9 000001C3 FFFFEA8D FFFFEBE1 000004B7
0000019B 00000275 FFFFEA8D FFFFEBE1 0000006A
0000019B 00000275 FFFFEA8D FFFFEBE1 0000006B
0000019B 00000275 FFFFEA8D FFFFEBE1 0000006C
0000019B 00000275 FFFFEA8D FFFFEBE1 0000006D
0000019B 00000275 FFFFEA8D FFFFEBE1 0000006E
0000019B 00000275 FFFFEA8D FFFFEBE1 0000006F
0000019B 00000275 FFFFEA8D FFFFEBE1 000004AA
0000019B 00000275 FFFFEA8D FFFFEBE1 000004AB
...etc.
it eventually decides on 0x20 as the map index.


802AF314: ;ROUTINE BEGINS HERE
SP -= 0xA8
T6 = halfword @8015F6E8 ;=0x08AA (2218)
T7 = halfword @8015F6EA ;=0xF263 (-57955)
T8 = halfword @8015F6F0 ;=0x1024 (4132)
T9 = halfword @8015F6F2 ;=0xEAA1 (-5471)

802AF338:
V0 = 80150110
V1 = 8014F110
push RA, S8, S7, S6, S5, S4, S3, S2, S1, S0 @ 0044 - 0020

802AF368:
A0 = T6 - T7
A1 = T8 - T9

;clear some memory
802AF378:
V0 += 16
halfword FFF6(V0) = 0
halfword FFFA(V0) = 0
halfword FFFE(V0) = 0
halfword FFF2(V0) = 0
if(V1 != V0) goto 802AF378

802AF390:
halfword @8015F58A = 0
word @8015F584 = word @8015F728 ;=801F3DB8 (looks like it points to a Y coord in the vertices (14-byte), which is 0x2E7 (743)) and 801F3DB0 (pointing to the T coord of previous vtx?)
V1 = halfword @8015F588 ;=061E
S7 = 0

802AF3B8:
if(A0 >= 0)
{
	S6 = A0 >> 5
	goto 802AF3C8
}
S6 = (A0 + 0x1F) >> 5

802AF3C8:
if(A1 >= 0)
{
	S8 = A1 >> 5
	goto 802AF3D8
}
S8 = (A1 + 0x1F) >> 5;

;look at 802AF52C to see why this seems to be multiplying by zero - it jumps back here with S7 and S5 nonzero

802AF3D8:
word S8 * S7

802AF3DC:
S5 = 0

802AF3EC:
T3 = S6 * S5

802AF3F0:
T2 = halfword @8015F6EA ;=F263 - looks like 16-bit coords from 8015F6E8 - 8015F6F7
T6 = halfword @8015F6F2 ;=EAA1
T7 = word 004C(SP)
S0 = 0
S3 = 0

;this looks like a loop iterating the surface maps
802AF414:
S1 = (((T2 + T3) - 20) << 16) >> 16

802AF430:
S2 = (((T6 + T7) - 20) << 16) >> 16

802AF434:
T0 = word @ 8015F580 ;=801E3080 - RSP seg 15
A3 = (S2 + S8) + 40
V0 = S3 + T0

802AF448:
T1 = halfword 000E(V0) ;EC19, a coordinate?
if(T1 < S2)
{
	S0++
	goto 802AF52C
}

802AF458:
T4 = halfword 0008(V0) ;EB95, a coordinate?
if(((A3 << 16) >> 16) < T4)
{
	S0++
	goto 802AF52C
}

802AF470:
T5 = halfword 000A(V0) ;00F4, a coordinate
A1 = (S1 + S6) + 40
if(T5 < S1)
{
	S0++
	goto 802AF52C
}

T8 = halfword 0004(V0) ;=65; $V0 is 801E428C
;this looks like surface map data in RAM, so this is probably iterating the maps, and this would be the first in RR - the data before it doesn't look like map data

A1 = (A1 << 16) >> 16 ;not sure what the point of this is, maybe to set high bits
802AF494:
if(A1 < T8) goto 802AF528
A0 = (S1 << 16) >> 16
A2 = (S2 << 16) >> 16

802AF4B4:
word 0010(SP) = S0
JAL 802AF0FC ;this is the call that was patched

802AF4BC:
if(V0 != 1) goto 802AF520
T2 = (S7 << 5) + S5
T4 = 8014F110
V0 = (T2 << 2) + T4
V1 = halfword from 0002(V0)
if(V1 != 0)
{
	T6 = V1 + 1
	goto 802AF4FC
}

802AF4EC:
halfword @ V0 = halfword from S4
T6 = (halfword from 0002(V0)) + 1

802AF4FC:
halfword @ 0002(V0) = T6
halfword @((word @8015F584) + ((halfword from S4) << 1)) = S0 ;8015F584=801F3DB0
(halfword @S4)++
V1 = halfword @8015F588 ;=0x61E (1566)
S0++

;lots of jumps to here
802AF52C:
S3 += 0x2C ;44
if(S0 >= V1) goto 802AF434
S5++
if(S5 != 32) goto 802AF3EC
S7++
if(S7 != 32) goto 802AF3D8

802AF558:
pop RA from 0044
pop S0 - S8 from 0020 - 0040
SP += 0xA8
return ;ROUTINE ENDS HERE