00: Nothing
01: Banana
02: Multi Banana
03: Green Shell
04: Triple Green Shell
05: Red Shell
06: Triple Red Shell
07: Spiny Shell
08: Lightning
09: Fake Item Box
0A: Star
0B: Boo
0C: Mushroom
0D: 2 Mushrooms
0E: 3 Mushrooms
0F: Super Mushroom

Item order chart:
   1  2  3  4  5  6  7  8  9  A  B  C
1|03 04 05 06 07 0C 0F 01 02 0A 09
2|03 04 05 06 0C 0F 0E 01 02 08 09 0B
3|03 04 05 06 07 0F 0E 01 02 08 0A 0B

Backward (table of positions indexed by item):
  1 2 3
1|8 8 8
2|9 9 9
3|1 1 1
4|2 2 2
5|3 3 3
6|4 4 4
7|5 - 5
8|- A A
9|B B -
A|A - B
B|- C C
C|6 5 -
D|- - -
E|- 7 7
F|7 6 6


Item frequency chart:
Mode    |     GP        |VS2| VS3 | VS4
Position|1 2 3 4 5 6 7 8|1 2|1 2 3|1 2 3 4
Banana  |A D D D D D D D|B D|A C D|A C D D
M Banana|C C D D D D D D|C C|C C D|C C C D
G Shell |A C D D D D D D|A D|A D D|A C D D
TG Shell|C C C D D D D D|C C|D C D|D C C D
R Shell |C B B B C D D D|C C|C B C|C B C D
TR Shell|D B B B B B B B|D B|D B B|D B B B
S Shell |D D D C C C C B|D C|D D C|D D C C
Litning |D C C C C B B B|D C|D D C|D D C C
Fakeitem|C C D D D D D D|C D|C C D|C C C D
Star    |D C C B B B A A|D B|D C B|D C C B
Boo     |C C D D D D D D|C D|C C D|C C D D
Shroom  |C C C C C D D D|C D|C C D|C C C D
2 Shroom|never appears
3 Shroom|D B B B B B C C|D B|D B B|D B B B
S Shroom|D C C C C C C C|D B|D C C|D D C C

A=frequently, D=rarely (pretty much never)

E6249 is an interesting table. E92C6 is odd too; save data?
E4F80 is also unusual.

this info might not be in a convenient table.

67CF12A9
CF67A912
76FC219A
A912CF67
9A21FC76

80165F5D player 1 item
800723A4 runs when you hit an item box, eventually storing $A1 to your item (16-bit)
call at 8007AC60 [0C01C8E9]; killing it prevents you from getting items from boxes. It calls with $A1=0 though...

80165EB8 is referenced, seems to be part of a struct array.

800723E0 [0C01C8E2] calls 80072388; killing it seems to give you better items in first place (lots of shrooms) if you let it cycle through.
This address gets hit just about every frame when a red or spiny shell is active.


That "level 1 has a tree on the road" code could be used to find the coords of the tree, which could help find 2D objects in ROM.
At 8015F9D0 (the code's address) we find:
43C70000 42E60000 C529F000
16 bytes before it:
41880000 40400000 40000000

as a float, 43C70000 = 7.15.

Should consider writing a program to stick all the decompressed MIO0 files together, padded to a multiple of 16 bytes, each with a header like "MIO0DUMP" [address in ROM] [size in bytes]
would allow searching every file at once in a hex editor

Regarding the texture list: 06 is an RSP command for a display list: 06 ?? ?? ?? ss aa aa aa - s=segment (bank), a=address within it. Matches this well: ? are all zero, segment always seems to be 7, and the commands appear to be 8 bytes.

B8 also appears, which means End Display List. It has no parameters, and guess what, it always appears to be followed by seven zeros.
B6 and B7 also appear (Clear Geometry Mode and Set Geometry Mode).

At one point we see what looks like a lot of four-byte Fx commands, then some other random junk after that.

Actually this is in the "Texture/RSP File" as it's called in the header dump, while the texture list is the "Unknown File" which isn't compressed. This is probably init code.

E-Gulls.