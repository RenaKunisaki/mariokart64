800C3464 writes song ID ($A0) when race starts
called at 800C8ECC; at 800C8EC4 it ORs $A0 (00000003) and $AT (00010000) - this seems to be some sort of sound control where the high word tells what to do (1=load a song) and the low word identifies it, so this means play song 3 which is the raceway theme
This is called at 8028ECE0 which is jumped to by the JR $T7 right above it
Looks like the index is simply the track ID times 4, so the music is hardcoded too V_v

Fortunately the code is basically the same for all the tracks, so it's easily visible and editable in a hex
editor, even being conveniently 16 bytes.
0C0323AB 240400xx 100000yy 8FBF0014
JAL 800C8EAC
ADDIU $A0, $zero, 00xx
BEQ $zero, $zero, 8028ED9C
LW $RA, 0014($SP)
(taking full advantage of the delay slot here.)

xx is the song ID. Since branches are PC-relative, yy changes with the location of the routine. Unfortunately these aren't in order of the track ID or anything nice like that.
Dump of the jump table indexed by track ID:
8028ECE0 8028ED10 8028ED40 8028ED50 8028ED00 8028ED60 8028ED30 8028ECE0 8028ECE0 8028ED00 8028ECF0 8028ED20 8028ED60 8028ED70 8028ECE0 8028ED10 8028ED90 8028ED10 8028ED80 8028ED90
You can see there are some duplicates, making this more of a pain than it needs to be. However we can probably
write over all this stupid code with a routine that will use an unused header byte to select the song.
The headers of all courses are found in RAM at 802B8D80, one after another.
At 8028ECBC, $T7 becomes the track ID and it's checked to see if it's valid. $AT is free. K, let's try to hack together something that will use the seemingly unused last header byte as the song ID.

;NOTE: Renegade will ignore some instructions if you don't remove the comments!
8028ECC8
SLL $AT, $T7, 0004 ;cheap way to multiply by 0x30:
SLL $T7, $T7, 0005 ;x = (x << 4) | (x << 5)
OR $T7, $T7, $AT   ;since 0x30 = %110000
LUI $AT, 802C
ADDU $AT, $AT, $T7
JAL 800C8EAC
LB $A0, 8DAF($AT) ;last header byte
BEQ $zero, $zero, 8028ED9C
LW $RA, 0014($SP)

Seems to work fine. :-D I'm not totally sure that last byte is unused but it could easily be adapted to read a table if necessary.
Now we need to find this code in ROM to be able to patch it.
Old bytes: 000F78803C01802C002F08218C2F920401E00008000000000C0323AB240400031000002C
New bytes: 000F0900000F794001E178253C01802C002F08210C0323AB80248DAF1000002D8FBF0014
It's at F82D8. Patch that in and fix the checksum and the last byte of the header is now a song ID. As a bonus, the next 0xB0 bytes are now unused, as is the jump table at 122814 which loads to RAM address 802B9204. The table is 0x50 bytes so altogether this patch frees up 0x100 bytes, room for 64 instructions.

Hm, 0xB0 bytes is 8 bytes per track plus another 16 bytes. You could fix another stupid hardcoded thing, such as the locations of trees/item boxes/etc, and put the table here. (That is assuming there are only 4 groups and they never have to be more than 64K into the file, then you'd need only 2 bytes for each group, FFFF meaning none. If not, there's probably other hardcoded shit this could be used for. Or you could just put your name in it or something.)

This could be made more efficient if there were a pointer to the current level's header kept in RAM, or a copy of the header, at a fixed location, but there doesn't appear to be. The header is only used during loading where it's copied to the stack.